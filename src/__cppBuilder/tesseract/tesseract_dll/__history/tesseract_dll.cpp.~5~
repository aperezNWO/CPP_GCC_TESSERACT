//   Important note about DLL memory management when your DLL uses the
//   static version of the RunTime Library:
//
//   If your DLL exports any functions that pass String objects (or structs/
//   classes containing nested Strings) as parameter or function results,
//   you will need to add the library MEMMGR.LIB to both the DLL project and
//   any other projects that use the DLL.  You will also need to use MEMMGR.LIB
//   if any other projects which use the DLL will be performing new or delete
//   operations on any non-TObject-derived classes which are exported from the
//   DLL. Adding MEMMGR.LIB to your project will change the DLL and its calling
//   EXE's to use the BORLNDMM.DLL as their memory manager.  In these cases,
//   the file BORLNDMM.DLL should be deployed along with your DLL.
//
//   To avoid using BORLNDMM.DLL, pass string information using "char *" or
//   ShortString parameters.
//
//   If your DLL uses the dynamic version of the RTL, you do not need to
//   explicitly add MEMMGR.LIB as this will be done implicitly for you.
//   If you are using the static version of the RTL, add #include<usebormm.h>
//   to one of the source files for your DLL
#include <windows.h>
#include <iostream>
#include <conio.h>
#include <string>
#pragma hdrstop
#pragma argsused

// Define function pointer types for the DLL functions
typedef const char* (__cdecl *GetTensorFlowOcrOutputFunc)();

extern "C" int _libmain(unsigned long reason)
{
	return 1;
}

extern "C" __declspec(dllexport) const char* __cdecl GetTensorFlowOcrOutput() {
    // Load the DLL
    HINSTANCE hDll = LoadLibraryA("tesseract.dll");
    if (!hDll) {
        DWORD errorCode = GetLastError(); // Capture the error immediately
        std::cerr << "Failed to load tesseract.dll. Error code: " << errorCode << std::endl;

        // Optional: Format the error message for more detail
        LPVOID errorMsg;
        FormatMessageA(
            FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
            NULL,
            errorCode,
            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
            (LPSTR)&errorMsg,
            0,
            NULL
        );
        std::cerr << "Error message: " << (LPSTR)errorMsg << std::endl;
        LocalFree(errorMsg);

        return "error";
    }

    // Get the addresses of the exported functions
    GetTensorFlowOcrOutputFunc getOcrOutput = (GetTensorFlowOcrOutputFunc)GetProcAddress(hDll, "GetTensorFlowOcrOutput");

    // Check if the functions were found
    if (!getOcrOutput) {
        std::cerr << "Failed to get function addresses. Error code: " << GetLastError() << std::endl;
        FreeLibrary(hDll);
        return "error";
    }

    // Test GetTensorFlowOcrOutput (uses hardcoded "Input.png")
    const char* result2 = getOcrOutput();
    //std::cout << "GetTensorFlowOcrOutput result: " << result2 << std::endl;

    // Pause and wait for a keypress
    //std::cout << "\nPress any key to exit..." << std::endl;


    // Clean up
    //FreeLibrary(hDll);
    return result2;
}

